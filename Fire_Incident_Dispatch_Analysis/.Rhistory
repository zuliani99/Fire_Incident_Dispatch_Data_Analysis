fire_data.test <- subset(fire_data_new, select = -incident_class)
dim(fire_data.train)
dim(fire_data.test)
sample <- sample(c(TRUE, FALSE), nrow(fire_data_new), replace=TRUE, prob=c(0.8,0.2))
fire_data.train <- fire_data_new[sample, ]
fire_data.test <- fire_data_new[!sample, ]
fire_data.test <- subset(fire_data.test, select = -incident_class)
dim(fire_data.train)
dim(fire_data.test)
round(summary(fire_data.train$incident_class) / nrow(fire_data.train), digits = 4)
multi.fit <- multinom(incident_class ~ ., data = fire_data.train, trace = FALSE)
summary(mod)
summary(multi.fit)
multi.fit <- multinom(incident_class ~ ., data = fire_data.train, trace = FALSE)
summary(multi.fit, Wald.ratios = TRUE)
table(preds = multi.preds <- predict(multi.fit, newdata = fire_data.test), true = fire_data.test$incident_class)
fire_data.test$incident_class
sample <- sample(c(TRUE, FALSE), nrow(fire_data_new), replace=TRUE, prob=c(0.8,0.2))
fire_data.train <- fire_data_new[sample, ]
fire_data.test <- fire_data_new[!sample, ]
#fire_data.test <- subset(fire_data.test, select = -incident_class)
dim(fire_data.train)
dim(fire_data.test)
round(summary(fire_data.train$incident_class) / nrow(fire_data.train), digits = 4)
multi.fit <- multinom(incident_class ~ ., data = fire_data.train, trace = FALSE)
table(preds = multi.preds <- predict(multi.fit, newdata = fire_data.test), true = fire_data.test$incident_class)
multi.fit$AIC
print(ctable(preds = multi.preds <- predict(multi.fit, newdata = fire_data.test), true = fire_data.test$incident_class), method = 'render')
names(fire_data.train)
names(model.fit)
names(multi.fit)
names(fire_data.train)
model.fit2$AIC
model.fit2 <- update(model.fit, . ~ . - AL_loction - zip - Pprecint - citycouncil_dist - community_dist - comm_school_dist - congressional_dist)
multi.fit2 <- update(multi.fit, . ~ . - AL_loction - zip - Pprecint - citycouncil_dist - community_dist - comm_school_dist - congressional_dist)
multi.fit2$AIC
mean(multi.preds == fire_data.test$incident_class)
table(preds = multi.preds <- predict(multi.fit, newdata = fire_data.test), true = fire_data.test$incident_class)
multi.fit2 <- update(multi.fit1, . ~ . - AL_loction - zip - Pprecint - citycouncil_dist - community_dist - comm_school_dist - congressional_dist)
table(preds = multi.preds2 <- predict(multi.fit2, newdata = fire_data.test), true = fire_data.test$incident_class)
mean(multi.preds2 == fire_data.test$incident_class)
summary(multi.preds2, wald = TRUE)
summary(multi.fit2, wald = TRUE)
names(fire_data.train)
#knitr::opts_chunk$set(echo = TRUE) #, cache=TRUE
setwd("C:/Users/ricca/Desktop/UNI/Magistrale/Anno3/Statistical_Inference_and_Learning/SIL Projcet/Statistical_Inference_Learning_Project/Fire_Incident_Dispatch_Analysis")
#install.packages("nnet")
#install.packages("jmv")
#install.packages("summarytools")
library(nnet)
#library(jmv)
library(summarytools)
library(lubridate)
#library(ggplot2)
#last_50000 <- tail(read.csv("Fire_Incident_Dispatch_Data.csv"), 50000)
#write.csv(last_50000, file = "C:/Users/ricca/Desktop/UNI/Magistrale/Anno3/Statistical_Inference_and_Learning/SIL Projcet/Statistical_Inference_Learning_Project/Fire_Incident_Dispatch_Analysis/Fire_Incident_Dispatch_Data_last.csv", row.names = FALSE)
fire_data <- read.csv("Fire_Incident_Dispatch_Data_last_50k.csv")
print(dfSummary(fire_data,
varnumbers   = FALSE,
valid.col    = FALSE,
graph.magnif = 0.76),
method = 'render')
identical(fire_data$ALARM_BOX_BOROUGH, fire_data$INCIDENT_BOROUGH)
fire_data$VALID_DISPATCH_RSPNS_TIME_INDC <- as.factor(fire_data$VALID_DISPATCH_RSPNS_TIME_INDC)
summary(fire_data$VALID_DISPATCH_RSPNS_TIME_IND)
fire_data$VALID_INCIDENT_RSPNS_TIME_INDC <- as.factor(fire_data$VALID_INCIDENT_RSPNS_TIME_INDC)
summary(fire_data$VALID_INCIDENT_RSPNS_TIME_INDC)
fire_data$INCIDENT_BOROUGH <- as.factor(fire_data$INCIDENT_BOROUGH)
fire_data$ALARM_SOURCE_DESCRIPTION_TX <- as.factor(fire_data$ALARM_SOURCE_DESCRIPTION_TX)
fire_data$ALARM_LEVEL_INDEX_DESCRIPTION <- as.factor(fire_data$ALARM_LEVEL_INDEX_DESCRIPTION)
fire_data$HIGHEST_ALARM_LEVEL <- as.factor(fire_data$HIGHEST_ALARM_LEVEL)
fire_data$VALID_INCIDENT_RSPNS_TIME_INDC <- as.factor(fire_data$VALID_INCIDENT_RSPNS_TIME_INDC)
levels(fire_data$VALID_INCIDENT_RSPNS_TIME_INDC)<- c("N", "Y")
fire_data$INCIDENT_CLASSIFICATION_GROUP <- as.factor(fire_data$INCIDENT_CLASSIFICATION_GROUP)
fire_data$INCIDENT_CLASSIFICATION <- as.factor(fire_data$INCIDENT_CLASSIFICATION)
# ALARM_BOX_LOCATION is a little bit difficult to model it is better to focus in the big area
print(ctable(fire_data$INCIDENT_CLASSIFICATION, fire_data$INCIDENT_CLASSIFICATION_GROUP), method = 'render')
for (variable in levels(fire_data$INCIDENT_CLASSIFICATION_GROUP)) {
non_zero_table <- table(subset(fire_data, INCIDENT_CLASSIFICATION_GROUP == variable)$INCIDENT_CLASSIFICATION)
cat(variable, "\n")
print(non_zero_table[non_zero_table != 0])
cat("\n")
}
summary(fire_data$VALID_INCIDENT_RSPNS_TIME_INDC)
table(fire_data$INCIDENT_BOROUGH)
non_valid_inc_resp <- subset(fire_data, VALID_INCIDENT_RSPNS_TIME_INDC == "N")
table(non_valid_inc_resp$INCIDENT_BOROUGH)
table(non_valid_inc_resp$INCIDENT_BOROUGH) / table(fire_data$INCIDENT_BOROUGH)
summary(fire_data)
na_locations <- subset(fire_data, is.na(ZIPCODE) | is.na(POLICEPRECINCT) | is.na(CITYCOUNCILDISTRICT) | is.na(COMMUNITYDISTRICT) |  is.na(COMMUNITYSCHOOLDISTRICT) |  is.na(CONGRESSIONALDISTRICT))
print(dfSummary(na_locations,
varnumbers   = FALSE,
valid.col    = FALSE,
graph.magnif = 0.76),
method = 'render')
table(na_locations$INCIDENT_BOROUGH) / table(fire_data$INCIDENT_BOROUGH)
table(na_locations$INCIDENT_CLASSIFICATION_GROUP) / table(fire_data$INCIDENT_CLASSIFICATION_GROUP)
fd_nm_mfa_cl <- table(subset(fire_data, INCIDENT_CLASSIFICATION_GROUP == "NonMedical MFAs")$INCIDENT_CLASSIFICATION)
fd_nm_mfa_bro <- table(subset(fire_data, INCIDENT_CLASSIFICATION_GROUP == "NonMedical MFAs")$INCIDENT_BOROUGH)
fd_nm_mfa_cl <- fd_nm_mfa_cl[fd_nm_mfa_cl != 0]
fd_nm_mfa_cl
na_nm_mfa_cl <- table(subset(na_locations, INCIDENT_CLASSIFICATION_GROUP == "NonMedical MFAs")$INCIDENT_CLASSIFICATION)
na_nm_mfa_bro <- table(subset(na_locations, INCIDENT_CLASSIFICATION_GROUP == "NonMedical MFAs")$INCIDENT_BOROUGH)
na_nm_mfa_cl <- na_nm_mfa_cl[names(fd_nm_mfa_cl)]
na_nm_mfa_cl
na_nm_mfa_cl / fd_nm_mfa_cl
na_nm_mfa_bro / fd_nm_mfa_bro
print(summary(subset(fire_data, VALID_INCIDENT_RSPNS_TIME_INDC == "N")$INCIDENT_RESPONSE_SECONDS_QY))
print(summary(fire_data$INCIDENT_RESPONSE_SECONDS_QY))
fire_data = subset(fire_data, select = -c(
STARFIRE_INCIDENT_ID, ALARM_BOX_BOROUGH, INCIDENT_CLASSIFICATION, ALARM_BOX_LOCATION,
VALID_DISPATCH_RSPNS_TIME_INDC, DISPATCH_RESPONSE_SECONDS_QY,
FIRST_ASSIGNMENT_DATETIME, FIRST_ACTIVATION_DATETIME, FIRST_ON_SCENE_DATETIME, INCIDENT_CLOSE_DATETIME
))
names(fire_data) <- c("fire_datetime", "AL_loction", "incident_brough", "zip", "Pprecint", "citycouncil_dist", "community_dist", "comm_school_dist", "congressional_dist", "alarm_source_desc", "alarm_level_idx", "highest_alarm_lev", "incident_class", "valid_inc_resp_time_indc", "incident_resp_sec", "incident_travel_time_sec", "engines_assigned", "ladders_assigned", "other_utits_assigned")
names(fire_data)
# Select the observations with the valid_inc_resp_time_indc set to Y
fire_data <- subset(fire_data, valid_inc_resp_time_indc == "Y")
fire_data <- na.omit(fire_data)
print(dfSummary(fire_data,
varnumbers   = FALSE,
valid.col    = FALSE,
graph.magnif = 0.76),
method = 'render')
fire_data = subset(fire_data, select = -c(incident_travel_time_sec))
# highest_alarm_lev
fire_data$highest_alarm_lev_new <- fire_data$highest_alarm_lev
levels(fire_data$highest_alarm_lev_new) <- list(
"All Hands Working" = "All Hands Working",
"First Alarm" = "First Alarm",
"2nd-3rd Alarm" = c("Second Alarm", "Third Alarm")
)
print(ctable(fire_data$highest_alarm_lev, fire_data$highest_alarm_lev_new), method = 'render')
fire_data$highest_alarm_lev <- fire_data$highest_alarm_lev_new
fire_data$highest_alarm_lev_new <- NULL
# alarm_level_idx
fire_data$alarm_level_idx_new <- fire_data$alarm_level_idx
levels(fire_data$alarm_level_idx_new) <- list(
"DEFAULT RECORD" = "DEFAULT RECORD",
"Initial Alarm" = "Initial Alarm",
"Others" = c("Second Alarm", "Third Alarm", "7-5 (All Hands Alarm)",
"10-76 & 10-77 Signal (Notification Hi-Rise Fire)",
"10-75 Signal (Request for all hands alarm)")
)
print(ctable(fire_data$alarm_level_idx, fire_data$alarm_level_idx_new), method = 'render')
fire_data$alarm_level_idx <- fire_data$alarm_level_idx_new
fire_data$alarm_level_idx_new <- NULL
# alarm_source_desc
fire_data$alarm_source_desc_new <- fire_data$alarm_source_desc
levels(fire_data$alarm_source_desc_new) <- list(
"PHONE" = "PHONE",
"EMS" = "EMS",
"EMS-911" = "EMS-911",
"CLASS-3" = "CLASS-3",
"Others" = c("911", "911TEXT", "VERBAL", "BARS", "ERS", "ERS-NC", "SOL")
)
print(ctable(fire_data$alarm_source_desc, fire_data$alarm_source_desc_new), method = 'render')
fire_data$alarm_source_desc <- fire_data$alarm_source_desc_new
fire_data$alarm_source_desc_new <- NULL
round(summary(fire_data$incident_class) / nrow(fire_data), digits = 4)
process_fire_datetime <- function(input_df) {
# Process datetime column
input_df$fire_datetime <- mdy_hms(input_df$fire_datetime)
# Create new columns for day number and time of day
input_df$day_number <- as.factor(day(input_df$fire_datetime))
input_df$time_of_day <- cut(
hour(input_df$fire_datetime),
breaks = c(0, 6, 12, 18, 24),
labels = c("Night", "Morning", "Afternoon", "Evening"),
include.lowest = TRUE,
right = TRUE
)
input_df$fire_datetime <- NULL
return(input_df)
}
fire_data_new <- process_fire_datetime(fire_data)
print(dfSummary(fire_data_new,
varnumbers   = FALSE,
valid.col    = FALSE,
graph.magnif = 0.76),
method = 'render')
sample <- sample(c(TRUE, FALSE), nrow(fire_data_new), replace=TRUE, prob=c(0.8,0.2))
fire_data.train <- fire_data_new[sample, ]
fire_data.test <- fire_data_new[!sample, ]
#fire_data.test <- subset(fire_data.test, select = -incident_class)
dim(fire_data.train)
dim(fire_data.test)
round(summary(fire_data.train$incident_class) / nrow(fire_data.train), digits = 4)
multi.fit1 <- multinom(incident_class ~ ., data = fire_data.train, trace = FALSE)
table(preds = multi.preds1 <- predict(multi.fit1, newdata = fire_data.test), true = fire_data.test$incident_class)
multi.fit1$AIC
mean(multi.preds1 == fire_data.test$incident_class)
multi.fit2 <- update(multi.fit1, . ~ . - AL_loction - zip - Pprecint - citycouncil_dist - community_dist - comm_school_dist - congressional_dist - day_number)
multi.fit2$AIC
table(preds = multi.preds2 <- predict(multi.fit2, newdata = fire_data.test), true = fire_data.test$incident_class)
mean(multi.preds2 == fire_data.test$incident_class)
summary(multi.fit2, wald = TRUE)
#knitr::opts_chunk$set(echo = TRUE) #, cache=TRUE
setwd("C:/Users/ricca/Desktop/UNI/Magistrale/Anno3/Statistical_Inference_and_Learning/SIL Projcet/Statistical_Inference_Learning_Project/Fire_Incident_Dispatch_Analysis")
#install.packages("nnet")
#install.packages("jmv")
#install.packages("summarytools")
library(nnet)
#library(jmv)
library(summarytools)
library(lubridate)
#library(ggplot2)
#last_50000 <- tail(read.csv("Fire_Incident_Dispatch_Data.csv"), 50000)
#write.csv(last_50000, file = "C:/Users/ricca/Desktop/UNI/Magistrale/Anno3/Statistical_Inference_and_Learning/SIL Projcet/Statistical_Inference_Learning_Project/Fire_Incident_Dispatch_Analysis/Fire_Incident_Dispatch_Data_last.csv", row.names = FALSE)
fire_data <- read.csv("Fire_Incident_Dispatch_Data_last_50k.csv")
print(dfSummary(fire_data,
varnumbers   = FALSE,
valid.col    = FALSE,
graph.magnif = 0.76),
method = 'render')
identical(fire_data$ALARM_BOX_BOROUGH, fire_data$INCIDENT_BOROUGH)
fire_data$VALID_DISPATCH_RSPNS_TIME_INDC <- as.factor(fire_data$VALID_DISPATCH_RSPNS_TIME_INDC)
summary(fire_data$VALID_DISPATCH_RSPNS_TIME_IND)
fire_data$VALID_INCIDENT_RSPNS_TIME_INDC <- as.factor(fire_data$VALID_INCIDENT_RSPNS_TIME_INDC)
summary(fire_data$VALID_INCIDENT_RSPNS_TIME_INDC)
fire_data$INCIDENT_BOROUGH <- as.factor(fire_data$INCIDENT_BOROUGH)
fire_data$ALARM_SOURCE_DESCRIPTION_TX <- as.factor(fire_data$ALARM_SOURCE_DESCRIPTION_TX)
fire_data$ALARM_LEVEL_INDEX_DESCRIPTION <- as.factor(fire_data$ALARM_LEVEL_INDEX_DESCRIPTION)
fire_data$HIGHEST_ALARM_LEVEL <- as.factor(fire_data$HIGHEST_ALARM_LEVEL)
fire_data$VALID_INCIDENT_RSPNS_TIME_INDC <- as.factor(fire_data$VALID_INCIDENT_RSPNS_TIME_INDC)
levels(fire_data$VALID_INCIDENT_RSPNS_TIME_INDC)<- c("N", "Y")
fire_data$INCIDENT_CLASSIFICATION_GROUP <- as.factor(fire_data$INCIDENT_CLASSIFICATION_GROUP)
fire_data$INCIDENT_CLASSIFICATION <- as.factor(fire_data$INCIDENT_CLASSIFICATION)
# ALARM_BOX_LOCATION is a little bit difficult to model it is better to focus in the big area
print(ctable(fire_data$INCIDENT_CLASSIFICATION, fire_data$INCIDENT_CLASSIFICATION_GROUP), method = 'render')
for (variable in levels(fire_data$INCIDENT_CLASSIFICATION_GROUP)) {
non_zero_table <- table(subset(fire_data, INCIDENT_CLASSIFICATION_GROUP == variable)$INCIDENT_CLASSIFICATION)
cat(variable, "\n")
print(non_zero_table[non_zero_table != 0])
cat("\n")
}
summary(fire_data$VALID_INCIDENT_RSPNS_TIME_INDC)
table(fire_data$INCIDENT_BOROUGH)
non_valid_inc_resp <- subset(fire_data, VALID_INCIDENT_RSPNS_TIME_INDC == "N")
table(non_valid_inc_resp$INCIDENT_BOROUGH)
table(non_valid_inc_resp$INCIDENT_BOROUGH) / table(fire_data$INCIDENT_BOROUGH)
summary(fire_data)
na_locations <- subset(fire_data, is.na(ZIPCODE) | is.na(POLICEPRECINCT) | is.na(CITYCOUNCILDISTRICT) | is.na(COMMUNITYDISTRICT) |  is.na(COMMUNITYSCHOOLDISTRICT) |  is.na(CONGRESSIONALDISTRICT))
print(dfSummary(na_locations,
varnumbers   = FALSE,
valid.col    = FALSE,
graph.magnif = 0.76),
method = 'render')
table(na_locations$INCIDENT_BOROUGH) / table(fire_data$INCIDENT_BOROUGH)
table(na_locations$INCIDENT_CLASSIFICATION_GROUP) / table(fire_data$INCIDENT_CLASSIFICATION_GROUP)
fd_nm_mfa_cl <- table(subset(fire_data, INCIDENT_CLASSIFICATION_GROUP == "NonMedical MFAs")$INCIDENT_CLASSIFICATION)
fd_nm_mfa_bro <- table(subset(fire_data, INCIDENT_CLASSIFICATION_GROUP == "NonMedical MFAs")$INCIDENT_BOROUGH)
fd_nm_mfa_cl <- fd_nm_mfa_cl[fd_nm_mfa_cl != 0]
fd_nm_mfa_cl
na_nm_mfa_cl <- table(subset(na_locations, INCIDENT_CLASSIFICATION_GROUP == "NonMedical MFAs")$INCIDENT_CLASSIFICATION)
na_nm_mfa_bro <- table(subset(na_locations, INCIDENT_CLASSIFICATION_GROUP == "NonMedical MFAs")$INCIDENT_BOROUGH)
na_nm_mfa_cl <- na_nm_mfa_cl[names(fd_nm_mfa_cl)]
na_nm_mfa_cl
na_nm_mfa_cl / fd_nm_mfa_cl
na_nm_mfa_bro / fd_nm_mfa_bro
print(summary(subset(fire_data, VALID_INCIDENT_RSPNS_TIME_INDC == "N")$INCIDENT_RESPONSE_SECONDS_QY))
print(summary(fire_data$INCIDENT_RESPONSE_SECONDS_QY))
fire_data = subset(fire_data, select = -c(
STARFIRE_INCIDENT_ID, ALARM_BOX_BOROUGH, INCIDENT_CLASSIFICATION, ALARM_BOX_LOCATION,
VALID_DISPATCH_RSPNS_TIME_INDC, DISPATCH_RESPONSE_SECONDS_QY,
FIRST_ASSIGNMENT_DATETIME, FIRST_ACTIVATION_DATETIME, FIRST_ON_SCENE_DATETIME, INCIDENT_CLOSE_DATETIME
))
names(fire_data) <- c("fire_datetime", "AL_loction", "incident_brough", "zip", "Pprecint", "citycouncil_dist", "community_dist", "comm_school_dist", "congressional_dist", "alarm_source_desc", "alarm_level_idx", "highest_alarm_lev", "incident_class", "valid_inc_resp_time_indc", "incident_resp_sec", "incident_travel_time_sec", "engines_assigned", "ladders_assigned", "other_utits_assigned")
names(fire_data)
# Select the observations with the valid_inc_resp_time_indc set to Y
fire_data <- subset(fire_data, valid_inc_resp_time_indc == "Y")
fire_data <- na.omit(fire_data)
print(dfSummary(fire_data,
varnumbers   = FALSE,
valid.col    = FALSE,
graph.magnif = 0.76),
method = 'render')
fire_data = subset(fire_data, select = -c(valid_inc_resp_time_indc))
# highest_alarm_lev
fire_data$highest_alarm_lev_new <- fire_data$highest_alarm_lev
levels(fire_data$highest_alarm_lev_new) <- list(
"All Hands Working" = "All Hands Working",
"First Alarm" = "First Alarm",
"2nd-3rd Alarm" = c("Second Alarm", "Third Alarm")
)
print(ctable(fire_data$highest_alarm_lev, fire_data$highest_alarm_lev_new), method = 'render')
fire_data$highest_alarm_lev <- fire_data$highest_alarm_lev_new
fire_data$highest_alarm_lev_new <- NULL
# alarm_level_idx
fire_data$alarm_level_idx_new <- fire_data$alarm_level_idx
levels(fire_data$alarm_level_idx_new) <- list(
"DEFAULT RECORD" = "DEFAULT RECORD",
"Initial Alarm" = "Initial Alarm",
"Others" = c("Second Alarm", "Third Alarm", "7-5 (All Hands Alarm)",
"10-76 & 10-77 Signal (Notification Hi-Rise Fire)",
"10-75 Signal (Request for all hands alarm)")
)
print(ctable(fire_data$alarm_level_idx, fire_data$alarm_level_idx_new), method = 'render')
fire_data$alarm_level_idx <- fire_data$alarm_level_idx_new
fire_data$alarm_level_idx_new <- NULL
# alarm_source_desc
fire_data$alarm_source_desc_new <- fire_data$alarm_source_desc
levels(fire_data$alarm_source_desc_new) <- list(
"PHONE" = "PHONE",
"EMS" = "EMS",
"EMS-911" = "EMS-911",
"CLASS-3" = "CLASS-3",
"Others" = c("911", "911TEXT", "VERBAL", "BARS", "ERS", "ERS-NC", "SOL")
)
print(ctable(fire_data$alarm_source_desc, fire_data$alarm_source_desc_new), method = 'render')
fire_data$alarm_source_desc <- fire_data$alarm_source_desc_new
fire_data$alarm_source_desc_new <- NULL
round(summary(fire_data$incident_class) / nrow(fire_data), digits = 4)
process_fire_datetime <- function(input_df) {
# Process datetime column
input_df$fire_datetime <- mdy_hms(input_df$fire_datetime)
# Create new columns for day number and time of day
input_df$day_number <- as.factor(day(input_df$fire_datetime))
input_df$time_of_day <- cut(
hour(input_df$fire_datetime),
breaks = c(0, 6, 12, 18, 24),
labels = c("Night", "Morning", "Afternoon", "Evening"),
include.lowest = TRUE,
right = TRUE
)
input_df$fire_datetime <- NULL
return(input_df)
}
fire_data_new <- process_fire_datetime(fire_data)
print(dfSummary(fire_data_new,
varnumbers   = FALSE,
valid.col    = FALSE,
graph.magnif = 0.76),
method = 'render')
sample <- sample(c(TRUE, FALSE), nrow(fire_data_new), replace=TRUE, prob=c(0.8,0.2))
fire_data.train <- fire_data_new[sample, ]
fire_data.test <- fire_data_new[!sample, ]
#fire_data.test <- subset(fire_data.test, select = -incident_class)
dim(fire_data.train)
dim(fire_data.test)
round(summary(fire_data.train$incident_class) / nrow(fire_data.train), digits = 4)
multi.fit1 <- multinom(incident_class ~ ., data = fire_data.train, trace = FALSE)
table(preds = multi.preds1 <- predict(multi.fit1, newdata = fire_data.test), true = fire_data.test$incident_class)
multi.fit1$AIC
mean(multi.preds1 == fire_data.test$incident_class)
multi.fit2 <- update(multi.fit1, . ~ . - AL_loction - zip - Pprecint - citycouncil_dist - community_dist - comm_school_dist - congressional_dist - day_number)
multi.fit2$AIC
table(preds = multi.preds2 <- predict(multi.fit2, newdata = fire_data.test), true = fire_data.test$incident_class)
mean(multi.preds2 == fire_data.test$incident_class)
summary(multi.fit2, wald = TRUE)
pValue_extract <- function(x){
z <- summary(x)$coefficients/summary(x)$standard.errors
# 2-tailed Wald z tests to test significance of coefficients
p <- (1 - pnorm(abs(z), 0, 1)) * 2
p
}
pValue_extract(multi.fit1)
pValue_extract(multi.fit2)
library("MASS")
lda.fit <- lda(formula(multi.fit2), data = fire_data.train)
lda.fit
lda.preds <- predict(lda.fit, newdata = fire_data.test)
table(preds = lda.preds$class, true = fire_data.test$incident_class)
mean(lda.preds$class == fire_data.test$incident_class)
qda.fit <- qda(formula(multi.fit2), data = fire_data.train)
formula(multi.fit2)
qda.fit <- qda(formula(multi.fit2), data = fire_data.train)
View(fire_data.train)
nb.fit <- naiveBayes(formula(model.fit2), data = fire_data.train)
library("e1071")
nb.fit <- naiveBayes(formula(model.fit2), data = fire_data.train)
library("MASS")
qda.fit <- qda(formula(multi.fit2), data = fire_data.train)
library("e1071")
nb.fit <- naiveBayes(formula(multi.fit2), data = fire_data.train)
nb.preds <- predict(nb.fit, newdata = fire_data.test)
table(preds = nb.preds$class, true = fire_data.test$incident_class)
table(preds = nb.preds$class, true = fire_data.test$incident_class, type = "class")
nb.preds <- predict(nb.fit, newdata = fire_data.test, type = "class")
table(preds = nb.preds$class, true = fire_data.test$incident_class)
table(preds = nb.preds, true = fire_data.test$incident_class)
mean(nb.preds$class == fire_data.test$incident_class)
mean(nb.preds == fire_data.test$incident_class)
x.train <- model.matrix(~ incident_brough + alarm_source_desc + alarm_level_idx +
highest_alarm_lev + incident_resp_sec + incident_travel_time_sec +
engines_assigned + ladders_assigned + other_utits_assigned +
time_of_day, data = fire_data.train)[, -1]
x.test <- model.matrix(~ incident_brough + alarm_source_desc + alarm_level_idx +
highest_alarm_lev + incident_resp_sec + incident_travel_time_sec +
engines_assigned + ladders_assigned + other_utits_assigned +
time_of_day, data = fire_data.test)[, -1]
library("class")
set.seed(98765)
rates <- double(50)
for (i in 1:50) {
tmp <- knn(train = x.train, test = x.test, cl = fire_data.train$incident_class, k = i)
rates[i] <- mean(tmp == fire_data.test$incident_class)
}
plot(x = (1:50), y = rates, xlab = "k", ylab = "Accuracy", type = "l")
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/ricca/Desktop/UNI/Magistrale/Anno3/Statistical_Inference_and_Learning/SIL Projcet/Statistical_Inference_Learning_Project/Fire_Incident_Dispatch_Analysis")
library(dplyr)
library(ggplot2)
library(tidyr)
library(tidyverse)
library(png)
install.packages("png")
library(dplyr)
library(ggplot2)
library(tidyr)
library(tidyverse)
library(png)
library(grid)
library(tm)
install.packages("tm")
library(dplyr)
library(ggplot2)
library(tidyr)
library(tidyverse)
library(png)
library(grid)
library(tm)
library(tm)
library(dplyr)
library(ggplot2)
library(tidyr)
library(tidyverse)
library(png)
library(grid)
library(tm)
library(SnowballC)
library("wordcloud")
library("RColorBrewer")
library(rio)
library(lubridate)
fire_data <- read.csv("Fire_Incident_Dispatch_Data_last_50k.csv")
names(fire_data)
data1<-fire_data %>% group_by(INCIDENT_BOROUGH)%>%summarise(AvgPrice=count())
data1<-fire_data %>% group_by(INCIDENT_BOROUGH)%>%summarise(AvgPrice=count(*))
ggplot(fire_data, aes(x = INCIDENT_BOROUGH)) +
geom_bar(stat = "count", fill = "blue") +
labs(title = "Observation Count by Group", x = "Group", y = "Count")
ggplot(fire_data, aes(x = INCIDENT_BOROUGH)) +
geom_bar(stat = "count", fill = "blue") +
labs(title = "Observation Count by Group", x = "Group", y = "Count")
ggplot(fire_data, aes(x = INCIDENT_BOROUGH)) +
geom_bar(stat = "count", fill = "blue") +
labs(title = "Observation Count by Group", x = "Group", y = "Count")
ggplot(fire_data,aes(x=INCIDENT_BOROUGH,fill=(INCIDENT_BOROUGH)))+
ggtitle("Fire Incident Neigbourhood Count")+ geom_point()+
geom_line()+
theme_minimal() +
labs(x = "Neigbourhood Groups",y = "Incident Count", fill="Neighbourhood Groups") +
theme(axis.text.x = element_text(angle =90,size=7,vjust=0.4))
ggplot(fire_data,aes(x=INCIDENT_BOROUGH,fill=(INCIDENT_BOROUGH)))+
ggtitle("Fire Incident Neigbourhood Count")+ geom_point()+
geom_line()+
theme_minimal() +
labs(x = "Neigbourhood Groups",y = "Incident Count", fill="Neighbourhood Groups") +
theme(axis.text.x = element_text(angle =90,size=7,vjust=0.4))
ggplot(fire_data,aes(x=INCIDENT_BOROUGH,fill=(INCIDENT_BOROUGH)))+
ggtitle("Fire Incident Neigbourhood Count")+
theme_minimal() +
labs(x = "Neigbourhood Groups",y = "Incident Count", fill="Neighbourhood Groups") +
theme(axis.text.x = element_text(angle =90,size=7,vjust=0.4))
ggplot(fire_data, aes(x = INCIDENT_BOROUGH)) +
geom_bar(stat = "count", fill = "blue") +
labs(title = "Observation Count by Group", x = "Group", y = "Count")
ggplot(fire_data,aes(x=INCIDENT_BOROUGH,fill=(INCIDENT_BOROUGH)))+
ggtitle("Fire Incident Neigbourhood Count")+ geom_bar(aes(fill = INCIDENT_CLASSIFICATION_GROUP))
theme_minimal() +
labs(x = "Neigbourhood Groups",y = "Incident Count", fill="Neighbourhood Groups") +
theme(axis.text.x = element_text(angle =90,size=7,vjust=0.4))
ggplot(fire_data,aes(x=INCIDENT_BOROUGH,fill=(INCIDENT_BOROUGH)))+
ggtitle("Fire Incident Neigbourhood Count")+ geom_bar(aes(fill = INCIDENT_CLASSIFICATION_GROUP))
theme_minimal() +
labs(x = "Neigbourhood Groups",y = "Incident Count", fill="Neighbourhood Groups") +
theme(axis.text.x = element_text(angle =90,size=7,vjust=0.4))
ggplot(fire_data,aes(x=INCIDENT_BOROUGH,y=AvgPrice,group=1,fill=(neighbourhood_group)))+
ggtitle("Changes in Prices over Neigbourhood Groups")+ geom_point()+
geom_line()+
theme_minimal() +
labs(x = "Neigbourhood Groups",y = "Average Price Values", fill="Neighbourhood Groups") +
theme_minimal()
ggplot(fire_data,aes(x=INCIDENT_BOROUGH,fill=(INCIDENT_BOROUGH)))+
ggtitle("Fire Incident Neigbourhood Count")+ geom_bar(aes(fill = INCIDENT_CLASSIFICATION_GROUP))
theme_minimal() +
labs(x = "Neigbourhood Groups",y = "Incident Count", fill="Neighbourhood Groups") +
theme_minimal()
ggplot(fire_data,aes(x=INCIDENT_BOROUGH,fill=(INCIDENT_BOROUGH)))+
ggtitle("Fire Incident Neigbourhood Count")+ geom_bar(aes(fill = INCIDENT_CLASSIFICATION_GROUP))
theme_minimal() +
labs(x = "Neigbourhood Groups",y = "Incident Count", fill="Neighbourhood Groups") +
theme_minimal()
ggplot(fire_data,aes(x=INCIDENT_BOROUGH,fill=(INCIDENT_BOROUGH)))+
ggtitle("Fire Incident Neigbourhood Count")+ geom_bar(aes(fill = INCIDENT_CLASSIFICATION_GROUP))
theme_minimal() +
labs(x = "Neigbourhood Groups",y = "Incident Count", fill="Neighbourhood Groups") +
ggplot(fire_data,aes(x=INCIDENT_BOROUGH,fill=(INCIDENT_BOROUGH)))+
ggtitle("Fire Incident Neigbourhood Count")+ geom_bar(aes(fill = INCIDENT_CLASSIFICATION_GROUP))+
labs(x = "Neigbourhood Groups",y = "Incident Count", fill="Neighbourhood Groups")
ggplot(fire_data,aes(x=INCIDENT_BOROUGH,fill=(INCIDENT_BOROUGH)))+
ggtitle("Fire Incident Neigbourhood Count")+ geom_bar(aes(fill = INCIDENT_CLASSIFICATION_GROUP))+
labs(x = "Neigbourhood Groups",y = "Incident Count", fill="Neighbourhood Groups")+
theme_minimal()
ggplot(fire_data,aes(x=INCIDENT_BOROUGH,fill=(INCIDENT_BOROUGH)))+
ggtitle("Fire Incident Neigbourhood Count")+ geom_bar(aes(fill = INCIDENT_CLASSIFICATION_GROUP))+
labs(x = "Neigbourhood Groups",y = "Incident Count", fill="Neighbourhood Groups")+
theme_classic()
install.packages("firatheme")
library(firatheme)
remotes::install_github("vankesteren/firatheme")
